[["recovery-likelihood.html", "Part 15 Recovery Likelihood 15.1 Set Up 15.2 Prepare Patch Data 15.3 Model Patch Recovery", " Part 15 Recovery Likelihood 15.1 Set Up 15.1.1 Libraries library(tidyverse) library(terra) library(sf) library(gridExtra) library(car) library(exactextractr) library(elevatr) library(rms) library(rempsyc) sf_use_s2(FALSE) 15.1.2 Import High-Severity Patches # fire list fire_list &lt;- c(&quot;Fire_7_1988&quot;,&quot;Fire_9_1988&quot;,&quot;Fire_10_1988&quot;,&quot;Fire_11_1988&quot;,&quot;Fire_12_1988&quot;,&quot;Fire_13_1988&quot;,&quot;Fire_14_1988&quot;,&quot;Fire_15_1988&quot;,&quot;Fire_16_1988&quot;,&quot;Fire_18_1988&quot;,&quot;Fire_19_1988&quot;,&quot;Fire_20_1988&quot;,&quot;Fire_22_1988&quot;,&quot;Fire_23_1988&quot;,&quot;Fire_25_1988&quot;,&quot;Fire_26_1988&quot;,&quot;Fire_28_1988&quot;,&quot;Fire_29_1988&quot;,&quot;Fire_31_1988&quot;,&quot;Fire_32_1989&quot;,&quot;Fire_33_1989&quot;,&quot;Fire_35_1989&quot;,&quot;Fire_38_1989&quot;,&quot;Fire_41_1989&quot;,&quot;Fire_42_1989&quot;,&quot;Fire_48_1990&quot;,&quot;Fire_49_1991&quot;,&quot;Fire_50_1991&quot;,&quot;Fire_51_1991&quot;,&quot;Fire_54_1991&quot;,&quot;Fire_1_1988&quot;,&quot;Fire_2_1988&quot;,&quot;Fire_3_1988&quot;,&quot;Fire_4_1988&quot;) # import high-severity patches patches &lt;- st_read(&quot;data/patches/highsev_patches.shp&quot;) %&gt;% mutate(Patch_ID = str_c(Fire_ID,&quot;-&quot;,1:n())) %&gt;% st_transform(crs = &quot;EPSG:4326&quot;) ## Reading layer `highsev_patches&#39; from data source ## `C:\\Users\\Casey\\Documents\\Grad School\\Research\\ConiferRegeneration\\data\\patches\\highsev_patches.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 5904 features and 10 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: -118.6156 ymin: 42.57637 xmax: -106.96 ymax: 48.92836 ## Geodetic CRS: WGS 84 # set crs crs &lt;- crs(patches) 15.2 Prepare Patch Data 15.2.1 Calculate Percent Reforested # import and join patch fragmentation data patch_fragmentation &lt;- do.call(bind_rows,lapply(list.files(path = &quot;data/patch_fate/t0t9&quot;, pattern = &quot;t0t9&quot;, all.files=TRUE, full.names=TRUE),read_csv)) # calculate the proportion of area recolonized by conifers after 30 years patch_recovery &lt;- patch_fragmentation %&gt;% group_by(Patch_ID,t9_status) %&gt;% summarise(t0_area = mean(t0_area), t9_area = round(sum(t9_area),5))%&gt;% pivot_wider(values_from = t9_area,names_from=t9_status) %&gt;% rename(t9_area_unforested = 4, t9_area_forested = 3)%&gt;% replace(is.na(.), 0) %&gt;% mutate(perc_forested = t9_area_forested/(t0_area)) 15.2.2 Calculate Patch Area and Edge patch_metrics &lt;- patches %&gt;% dplyr::select(Fire_ID,Patch_ID,ptch_fr,ecoregn) %&gt;% st_transform(3488) %&gt;% mutate(patch_area = round(as.numeric(st_area(.))/10000,4), perim_m = as.numeric(round(st_length(st_cast(geometry,to = &quot;MULTILINESTRING&quot;)),4)), area_perim_rat = patch_area/perim_m) %&gt;% st_buffer(-100) %&gt;% mutate(core_area = round(as.numeric(st_area(.))/10000,4), perc_core = round(core_area / patch_area,5))%&gt;% st_drop_geometry() 15.2.3 Calculate Patch Climate # import terraclim climate data, 3 year means before fire event # for each patch, extract the mean value for each climate variable get_climate &lt;- function(var){ extracted_var &lt;- list.files(path = &quot;data/terraclim/&quot;, pattern = var, all.files=TRUE, full.names=TRUE) %&gt;% rast() %&gt;% mean() %&gt;% extract(.,patches %&gt;% st_transform(crs= crs(.)),fun = mean,weights = TRUE, exact = TRUE) %&gt;% dplyr::select(mean) colnames(extracted_var) &lt;- var return(extracted_var) } # list of climate variables climate_variables &lt;- c(&quot;def&quot;,&quot;pdsi&quot;,&quot;swe&quot;,&quot;ppt&quot;,&quot;pet&quot;,&quot;tmax&quot;,&quot;soil&quot;,&quot;vpd&quot;) # extract mean climate values for each patch and assign to patch ID climate_df &lt;- map(climate_variables,get_climate) ## |---------|---------|---------|---------| ========================================= |---------|---------|---------|---------| ========================================= |---------|---------|---------|---------| ========================================= |---------|---------|---------|---------| ========================================= |---------|---------|---------|---------| ========================================= |---------|---------|---------|---------| ========================================= |---------|---------|---------|---------| ========================================= |---------|---------|---------|---------| ========================================= patch_climate &lt;- do.call(cbind,climate_df) %&gt;% cbind(Patch_ID = patches$Patch_ID,.) 15.2.4 Calculate Latitude patch_latitude &lt;- patches %&gt;% mutate(latitude = st_coordinates(st_centroid(geometry))[,2]) %&gt;% dplyr:: select(Patch_ID, latitude) %&gt;% st_drop_geometry() 15.2.5 Calculate Topography extract_topo &lt;- function(fire_name){ print(paste0(&quot;Starting Fire &quot;,fire_name)) # filter the patches for this fire fire_patches &lt;- patches %&gt;% filter(Fire_ID==fire_name) %&gt;% st_transform(crs=4326) dem &lt;- get_elev_raster(fire_patches,z=11) aspect &lt;- terrain(dem, opt = &quot;aspect&quot;,unit = &quot;degrees&quot;) slope &lt;- terrain(dem,opt=&#39;slope&#39;, unit=&#39;degrees&#39;) ccaspect &lt;- cos(aspect) # get the mean topographic values for each patch in this fire extracted_elev &lt;- left_join(fire_patches, exact_extract(dem,fire_patches, append_cols = TRUE, max_cells_in_memory = 3e+08, fun = &quot;mean&quot;)) %&gt;% st_drop_geometry() %&gt;% rename(elevation = mean) %&gt;% dplyr::select(Patch_ID, elevation) extracted_aspect &lt;- left_join(fire_patches, exact_extract(ccaspect,fire_patches, append_cols = TRUE, max_cells_in_memory = 3e+08, fun = &quot;mean&quot;)) %&gt;% st_drop_geometry() %&gt;% rename(aspect = mean) %&gt;% dplyr::select(aspect) extracted_slope &lt;- left_join(fire_patches, exact_extract(slope,fire_patches, append_cols = TRUE, max_cells_in_memory = 3e+08, fun = &quot;mean&quot;)) %&gt;% st_drop_geometry() %&gt;% rename(slope = mean) %&gt;% dplyr::select(slope) extracted_data &lt;- cbind(extracted_elev,extracted_aspect,extracted_slope) # export return(extracted_data) } # map extraction function across all fires extracted_fires &lt;- map(fire_list,extract_topo) patch_topography &lt;- do.call(rbind,extracted_fires) 15.2.6 Join Patch Metrics and Recovery Data # combine all predictor datasets, set recovery threshold to 80% forested log_recovery &lt;- list(patch_metrics,patch_recovery,patch_latitude,patch_climate,patch_topography) %&gt;% reduce(full_join, by=&#39;Patch_ID&#39;) %&gt;% drop_na() %&gt;% filter(ptch_fr %in% c(&quot;Douglas-Fir&quot;,&quot;Lodegepole Pine&quot;,&quot;Fir-Spruce&quot;)) %&gt;% mutate(log_recovered = case_when(perc_forested &gt;= 0.8 ~ 1, perc_forested &lt; 0.8 ~ 0), area_perim_rat = area_perim_rat*10000, ecoregn = as.factor(ecoregn), ptch_fr= as.factor(ptch_fr)) %&gt;% st_drop_geometry() 15.3 Model Patch Recovery 15.3.1 Prepare Model Data # data prep required for lrm model dd &lt;- datadist(log_recovery) options(datadist=&quot;dd&quot;) 15.3.2 Create Logistic Model # logistic regression model with lrm log_model &lt;- lrm(log_recovered ~ ptch_fr + area_perim_rat + patch_area + elevation + slope + aspect + def + swe ,data = log_recovery) log_model ## Logistic Regression Model ## ## lrm(formula = log_recovered ~ ptch_fr + area_perim_rat + patch_area + ## elevation + slope + aspect + def + swe, data = log_recovery) ## ## Model Likelihood Discrimination Rank Discrim. ## Ratio Test Indexes Indexes ## Obs 3852 LR chi2 1690.54 R2 0.477 C 0.858 ## 0 1653 d.f. 9 R2(9,3852)0.354 Dxy 0.716 ## 1 2199 Pr(&gt; chi2) &lt;0.0001 R2(9,2831)0.448 gamma 0.716 ## max |deriv| 3e-06 Brier 0.147 tau-a 0.351 ## ## Coef S.E. Wald Z Pr(&gt;|Z|) ## Intercept 9.1804 0.7289 12.59 &lt;0.0001 ## ptch_fr=Fir-Spruce -0.7437 0.1708 -4.35 &lt;0.0001 ## ptch_fr=Lodegepole Pine 1.0070 0.1679 6.00 &lt;0.0001 ## area_perim_rat -0.0070 0.0019 -3.69 0.0002 ## patch_area -0.0001 0.0001 -1.55 0.1219 ## elevation -0.0031 0.0002 -15.13 &lt;0.0001 ## slope -0.0993 0.0069 -14.37 &lt;0.0001 ## aspect -0.1738 0.4785 -0.36 0.7164 ## def -0.0231 0.0113 -2.05 0.0404 ## swe 0.0066 0.0034 1.97 0.0491 15.3.3 Oddâ€™s Ratios # odds ratio summary(log_model) ## Effects Response : log_recovered ## ## Factor Low High Diff. ## area_perim_rat 30.272000 51.63800 21.366000 ## Odds Ratio 30.272000 51.63800 21.366000 ## patch_area 3.416200 18.02000 14.604000 ## Odds Ratio 3.416200 18.02000 14.604000 ## elevation 2267.700000 2596.70000 328.980000 ## Odds Ratio 2267.700000 2596.70000 328.980000 ## slope 6.480900 19.04800 12.567000 ## Odds Ratio 6.480900 19.04800 12.567000 ## aspect -0.047218 0.04535 0.092568 ## Odds Ratio -0.047218 0.04535 0.092568 ## def 17.771000 22.01700 4.245500 ## Odds Ratio 17.771000 22.01700 4.245500 ## swe 66.483000 89.78600 23.303000 ## Odds Ratio 66.483000 89.78600 23.303000 ## ptch_fr - Douglas-Fir:Lodegepole Pine 3.000000 1.00000 NA ## Odds Ratio 3.000000 1.00000 NA ## ptch_fr - Fir-Spruce:Lodegepole Pine 3.000000 2.00000 NA ## Odds Ratio 3.000000 2.00000 NA ## Effect S.E. Lower 0.95 Upper 0.95 ## -0.1498300 0.04061000 -0.2294300 -0.07023900 ## 0.8608500 NA 0.7949900 0.93217000 ## -0.0014748 0.00095351 -0.0033436 0.00039406 ## 0.9985300 NA 0.9966600 1.00040000 ## -1.0189000 0.06734300 -1.1509000 -0.88692000 ## 0.3609900 NA 0.3163500 0.41192000 ## -1.2475000 0.08678400 -1.4176000 -1.07740000 ## 0.2872200 NA 0.2423000 0.34048000 ## -0.0160870 0.04429000 -0.1028900 0.07071900 ## 0.9840400 NA 0.9022200 1.07330000 ## -0.0981640 0.04789700 -0.1920400 -0.00428820 ## 0.9065000 NA 0.8252700 0.99572000 ## 0.1542000 0.07837000 0.0005946 0.30780000 ## 1.1667000 NA 1.0006000 1.36040000 ## -1.0070000 0.16789000 -1.3361000 -0.67800000 ## 0.3653000 NA 0.2628700 0.50763000 ## -1.7507000 0.09654400 -1.9400000 -1.56150000 ## 0.1736500 NA 0.1437100 0.20982000 15.3.4 Make Odds Ratio Table # bring in odds ratio table odds_table &lt;- read_csv(&quot;data/recovery/oddsratios_lrm.csv&quot;) %&gt;% dplyr::select(-6,-7,-8,-9,-12) # function to show data to correct number of digits fun &lt;- function(x) {formatC(x, format = &quot;f&quot;, digits = 3)} # create table odds &lt;- nice_table(odds_table, separate.header = TRUE,width = 1,col.format.custom = c(4,6),format.custom = &quot;fun&quot;) # export to word flextable::save_as_docx(odds, path = &quot;data/recovery/odds_table.docx&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
