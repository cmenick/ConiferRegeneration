[["index.html", "04_trainingdata Chapter 1 About", " 04_trainingdata Casey Menick 2022-11-19 Chapter 1 About bookdown::serve_book() "],["fire-selection.html", "Chapter 2 Fire Selection 2.1 Set Up 2.2 Define Fire Parameters 2.3 Final Fire Dataset 2.4 Export Data", " Chapter 2 Fire Selection 2.1 Set Up 2.1.1 Libraries library(tidyverse) library(terra) library(sf) library(mapview) library(raster) library(rgeos) library(lubridate) library(ggplot2) library(exactextractr) library(patchwoRk) library(gridExtra) 2.1.2 USDA National Forest Type Group Dataset Conifer Forest Type Groups: Douglas-Fir, Fir-Spruce-Mountain Hemlock, Lodgepole Pine # forest type groups and key conus_forestgroup &lt;- raster(&#39;data/forest_type/conus_forestgroup.tif&#39;) forest_codes &lt;- read_csv(&#39;data/forest_type/forestgroupcodes.csv&#39;) # set crs crs = crs(conus_forestgroup) 2.1.3 EPA level-3 Ecoregions Canadian Rockies, Idaho Batholith, Middle Rockies, Columbian Mountains - Northern Rockies # level 3 ecoregions l3eco &lt;- st_read(&#39;data/ecoregion/us_eco_l3.shp&#39;) %&gt;% st_transform(., crs=crs) # select northern rocky mountains from level3 ecoregions eco_select &lt;- l3eco %&gt;% filter(NA_L3NAME %in% c(&#39;Canadian Rockies&#39;,&#39;Columbia Mountains/Northern Rockies&#39;,&#39;Middle Rockies&#39;,&#39;Idaho Batholith&#39;)) 2.1.4 Mapping 2.1.4.1 Ecoregions mapview(eco_select) 2.1.4.2 Forest Type Groups forestgroup_crop &lt;- crop(conus_forestgroup,l3eco) mapview(forestgroup_crop) 2.2 Define Fire Parameters 2.2.1 Monitoring Trends in Burn Severity (MTBS) Dataset Criteria: -1988-1991 -500+ acres of high-severity -Within selected ecoregions -&gt;25% of selected forest types # mtbs fire perimeters mtbs_full &lt;- st_read(&#39;data/mtbs/mtbs_perims_DD.shp&#39;) %&gt;% st_transform(., crs=crs) mtbs_select &lt;- mtbs_full %&gt;% mutate(state = str_sub(Event_ID,0,2), year = year(as.Date(Ig_Date))) %&gt;% filter(state %in% c(&quot;WA&quot;,&quot;ID&quot;,&quot;MT&quot;,&quot;WY&quot;,&quot;SD&quot;), between(Ig_Date, as.Date(&#39;1988-01-1&#39;), as.Date(&#39;1991-12-31&#39;))) 2.2.2 Group Adjacent Fires # function to group adjoining fire polygons to ensure contiguous high-severity patches group_fires &lt;- function(mtbs_year) { # join the polygons with themselves, and remove those that do not join with any besides themselves combined&lt;- st_join(mtbs_year, mtbs_year, join=st_is_within_distance, dist = 180, left = TRUE,remove_self = TRUE) %&gt;% drop_na(Event_ID.y)%&gt;% dplyr::select(Event_ID.x,Event_ID.y) if(nrow(combined)&gt;=1){ # if there are overlaps for this years fires... # partition data into that that has overlap, and that that does not overlap &lt;- mtbs_year %&gt;% filter(Event_ID %in% combined$Event_ID.x) no_overlap &lt;- mtbs_year %&gt;% filter(!(Event_ID %in% combined$Event_ID.x)) print(paste0(&quot;there are &quot;,nrow(overlap),&quot; overlapping polygons&quot;)) # join all overlapping features, and buffer to ensure proper grouping overlap_union &lt;- st_union(overlap) %&gt;% st_buffer(190) # break apart the joined polygons into their individual groups groups &lt;- st_as_sf(st_cast(overlap_union ,to=&#39;POLYGON&#39;,group_or_split=TRUE)) %&gt;% mutate(year = mean(mtbs_year$year), Fire_ID = str_c(&quot;Fire_&quot;,c(1:nrow(.)),&quot;_&quot;,year)) %&gt;% rename(geometry = x) print(paste0(&quot;polygons formed into &quot;,nrow(groups),&quot; groups&quot;)) # join back with original dataset to return to unbuffered geometry grouped_overlap &lt;- st_join(overlap,groups,left=TRUE) # arrange by the new grouping joined_overlap_groups &lt;- grouped_overlap %&gt;% group_by(Fire_ID) %&gt;% tally()%&gt;% st_buffer(1) %&gt;% dplyr::select(Fire_ID) %&gt;% mutate(year = mean(mtbs_year$year)) # add new ID to the freestanding polygons no_overlap_groups &lt;- no_overlap %&gt;% mutate(Fire_ID = str_c(&quot;Fire_&quot;,nrow(groups)+c(1:nrow(no_overlap)),&quot;_&quot;,year)) %&gt;% dplyr::select(Fire_ID,year) # join the new grouped overlap and the polygons without overlap fires_export &lt;- rbind(joined_overlap_groups,no_overlap_groups) return(fires_export) } else { # if there are no overlaps for this year... print(&quot;no overlapping polygons&quot;) fires_export &lt;- mtbs_year %&gt;% mutate(Fire_ID = str_c(&quot;Fire_&quot;,c(1:nrow(.)),&quot;_&quot;,year)) %&gt;% dplyr::select(Fire_ID,year) return(fires_export) } } # group adjacent polygons within each fire year fires_88 &lt;- group_fires(mtbs_select %&gt;% filter(year == 1988)) ## [1] &quot;there are 22 overlapping polygons&quot; ## [1] &quot;polygons formed into 7 groups&quot; fires_89 &lt;- group_fires(mtbs_select %&gt;% filter(year == 1989)) ## [1] &quot;there are 2 overlapping polygons&quot; ## [1] &quot;polygons formed into 1 groups&quot; fires_90 &lt;- group_fires(mtbs_select %&gt;% filter(year == 1990)) ## [1] &quot;there are 2 overlapping polygons&quot; ## [1] &quot;polygons formed into 1 groups&quot; fires_91 &lt;- group_fires(mtbs_select %&gt;% filter(year == 1991)) ## [1] &quot;no overlapping polygons&quot; # join each fire year, filter by area mtbs_grouped &lt;- rbind(fires_88,fires_89,fires_90,fires_91)%&gt;% mutate(area_ha = as.numeric(st_area(geometry))/10000, area_acres = area_ha*2.471) 2.2.3 Select Fires by Ecoregion and Forest Type # assign ecoregion and proportions of forest type to each fire polygon fires_join &lt;- st_join(mtbs_grouped,eco_select,join=st_intersects,left=FALSE,largest=TRUE) %&gt;% left_join(., exact_extract(conus_forestgroup,mtbs_grouped, append_cols = TRUE, max_cells_in_memory = 3e+08, fun = function(value, coverage_fraction) { data.frame(value = value, frac = coverage_fraction / sum(coverage_fraction)) %&gt;% group_by(value) %&gt;% summarize(freq = sum(frac), .groups = &#39;drop&#39;) %&gt;% pivot_wider(names_from = &#39;value&#39;, names_prefix = &#39;freq_&#39;, values_from = &#39;freq&#39;)}) %&gt;% mutate(across(starts_with(&#39;freq&#39;), replace_na, 0))) # remove unnecessary columns, cleanup names # filter to ensure fire polygons are at least 25% type of interest fires &lt;- fires_join %&gt;% dplyr::select(&quot;Fire_ID&quot;,&quot;year&quot;,&quot;area_ha&quot;,&quot;area_acres&quot;,&quot;US_L3NAME&quot;,&quot;freq_0&quot;,&quot;freq_200&quot;,&quot;freq_220&quot;,&quot;freq_260&quot;,&quot;freq_280&quot;) %&gt;% rename(&quot;ecoregion&quot; = &quot;US_L3NAME&quot;, &quot;freq_df&quot;=&quot;freq_200&quot;, &quot;freq_pp&quot;=&quot;freq_220&quot;, &quot;freq_fs&quot;=&quot;freq_260&quot;, &quot;freq_lpp&quot;=&quot;freq_280&quot;) %&gt;% mutate(freq_allother = 1-(freq_0 + freq_df+freq_pp+freq_fs+freq_lpp), freq_forested = 1- freq_0, freq_ideal = freq_df+freq_fs+freq_lpp)%&gt;% mutate(across(starts_with(&#39;freq&#39;), round,2))%&gt;% filter(freq_ideal &gt; 0.25) 2.2.4 Select Fires by Burn Severity # import all mtbs rasters via a list rastlist &lt;- list.files(path = &quot;data/mtbs&quot;, pattern=&#39;.tif&#39;, all.files=TRUE, full.names=TRUE) allrasters &lt;- lapply(rastlist, raster) names(allrasters) &lt;- str_c(&quot;y&quot;, str_sub(rastlist,22,25)) # create empty dataframe severity_list &lt;- list() # loop through mtbs mosasics for 1988-1991 # extract mtbs burn severity raster for all selected fires # calculate burn severity percentages for each fire for (i in names(allrasters)){ mtbs_year &lt;- allrasters[[i]] fire_year &lt;- filter(fires, year==str_sub(i,2,5)) raster_extract &lt;- exact_extract(mtbs_year,fire_year, max_cells_in_memory = 3e+09,coverage_area=TRUE) names(raster_extract) &lt;- fire_year$Fire_ID output_select &lt;- bind_rows(raster_extract, .id = &quot;Fire_ID&quot;)%&gt;% group_by(Fire_ID , value) %&gt;% summarize(total_area = sum(coverage_area)) %&gt;% group_by(Fire_ID) %&gt;% mutate(proportion = total_area/sum(total_area))%&gt;% dplyr::select(&quot;Fire_ID&quot;,&quot;value&quot;,&quot;proportion&quot;) %&gt;% spread(.,key=&quot;value&quot;,value = &quot;proportion&quot;) severity_list[[i]] &lt;- output_select } # combine extracted raster datasets severity_df &lt;- do.call(rbind, severity_list) # join burn severity % to fires polygons # fix naming # filter dataset for 500 acres high severity fires_severity &lt;- left_join(fires,severity_df,by=&quot;Fire_ID&quot;)%&gt;% rename(noburn= &quot;1&quot;,lowsev = &quot;2&quot;, medsev = &quot;3&quot;, highsev = &quot;4&quot;,regrowth = &quot;5&quot;, error = &quot;6&quot;) %&gt;% dplyr::select(- &quot;NaN&quot;,-&quot;regrowth&quot;,-&quot;error&quot;) %&gt;% mutate(highsev_acres = area_acres*highsev)%&gt;% filter(highsev_acres &gt; 500) 2.2.5 Clean Up Dataset # get the most common forest type within each polygon fires_select &lt;- fires_severity %&gt;% left_join(.,exact_extract(conus_forestgroup,fires_severity, &#39;mode&#39;, append_cols = TRUE, max_cells_in_memory = 3e+08)) fires_select$mode &lt;- as.factor(fires_select$mode) fires_select &lt;- fires_select %&gt;% mutate(fire_foresttype = case_when(mode==200 ~ &quot;Douglas-Fir&quot;, mode==220 ~ &quot;Ponderosa&quot;, mode==260 ~ &quot;Fir-Spruce&quot;, mode==280 ~ &quot;Lodegepole Pine&quot;, TRUE ~ &quot;Other&quot;), Fire_ID = str_c(&quot;Fire_&quot;,c(1:nrow(.)),&quot;_&quot;,year)) # join the grouped fires back to original mtbs boundaries fires_mtbs &lt;- st_join(mtbs_select,fires_select,left=FALSE,largest=TRUE) %&gt;% filter(year.x==year.y)%&gt;% dplyr::select(&quot;Event_ID&quot;,&quot;Incid_Name&quot;,&quot;Fire_ID&quot;,&quot;Ig_Date&quot;,&quot;year.y&quot;,&quot;state&quot;,&quot;BurnBndAc&quot;,&quot;ecoregion&quot;) %&gt;% rename(year= year.y) 2.3 Final Fire Dataset 2.3.1 Selected fires by year # plot mapview(fires_select, zcol = &quot;year&quot;) 2.3.2 Selected fires by majority forest type # plot mapview(fires_select, zcol = &quot;fire_foresttype&quot;) 2.4 Export Data 2.4.1 Final Cleanup for Export # reformat and project fires_export &lt;- fires_select %&gt;% mutate(year = as.integer(year)) %&gt;% st_transform(., crs=&quot;EPSG:4326&quot;) mtbs_export &lt;- fires_mtbs %&gt;% mutate(year = as.integer(year)) %&gt;% st_transform(., crs=&quot;EPSG:4326&quot;) 2.4.2 Export # st_write(fires_export, &quot;data/fire_boundaries/&quot;, &quot;fires_export.shp&quot;, driver = &#39;ESRI Shapefile&#39;) # st_write(mtbs_export, &quot;data/fire_boundaries/&quot;, &quot;mbts_export.shp&quot;, driver = &#39;ESRI Shapefile&#39;) "],["patch-formation.html", "Chapter 3 Patch Formation 3.1 Set Up 3.2 Create High-Severity Patches 3.3 Refine Patches 3.4 Mapping 3.5 Export Data", " Chapter 3 Patch Formation 3.1 Set Up 3.1.1 Libraries library(tidyverse) library(terra) library(patchwoRk) library(sf) library(mapview) library(exactextractr) library(lubridate) 3.1.2 Import RdNBR Rasters # import calculated RdNBR rasters for each fire boundary polygon rast_list &lt;- list.files(path = &quot;data/rdnbr_rasters&quot;, pattern=&#39;.tif&#39;, all.files=TRUE, full.names=TRUE) rast_all &lt;- lapply(rast_list, rast) rast_collection &lt;- sprc(rast_all) crs &lt;- crs(rast_collection[1]) 3.1.3 Import Fire Boundaries # import fire boundaries mtbs_export &lt;- st_read(&#39;data/fire_boundaries/mtbs_export.shp&#39;) %&gt;% st_transform(., crs=crs) fires_export &lt;- st_read(&quot;data/fire_boundaries/fires_export.shp&quot;)%&gt;% st_transform(., crs=crs) # import forest type group raster conus_forestgroup &lt;- raster(&#39;data/forest_type/conus_forestgroup.tif&#39;) forest_codes &lt;- read_csv(&#39;data/forest_type/forestgroupcodes.csv&#39;) 3.2 Create High-Severity Patches 3.2.1 PatchMorph # loop through RdNBR rasters, assign &gt;640 to high severity category # utilize patchmorph to act as 3x3 cell majority filter patch_df &lt;- list() for (i in 1:length(rast_all)){ # print(i) rast_fire &lt;- raster(rast_collection[i]) rast_fire[rast_fire &lt; 640] &lt;- 0 rast_fire[rast_fire &gt;= 640] &lt;- 1 patch &lt;- patchMorph(rast_fire, spurThresh = 3, gapThresh = 3) patch_poly &lt;- as.polygons(rast(patch)) %&gt;% st_as_sf() df_union_cast &lt;- patch_poly %&gt;% st_cast(., &quot;POLYGON&quot;) %&gt;% filter(layer == 1) patch_df[[i]] &lt;- df_union_cast} patch_poly_all &lt;- do.call(rbind,patch_df) 3.3 Refine Patches # filter small patches patches_full &lt;- patch_poly_all %&gt;% mutate(patch_area_ha = as.numeric(st_area(.))/10000) %&gt;% filter(patch_area_ha &gt; 2.25) # join patches back to grouped fires patches_joined &lt;- st_join(patches_full,mtbs_export,join = st_intersects,left= FALSE,largest = TRUE) %&gt;% dplyr::select(-layer,-BurnBndAc) %&gt;% left_join(.,exact_extract(conus_forestgroup,., &#39;mode&#39;, append_cols = TRUE, max_cells_in_memory = 3e+08))%&gt;% mutate(patch_foresttype = case_when(mode==200 ~ &quot;Douglas-Fir&quot;, mode==220 ~ &quot;Ponderosa&quot;, mode==260 ~ &quot;Fir-Spruce&quot;, mode==280 ~ &quot;Lodegepole Pine&quot;, mode==0 ~ &quot;Unforested&quot;, TRUE ~ &quot;Other&quot;)) 3.4 Mapping mapview(patches_joined,col.regions = &quot;red&quot;) + mapview(fires_export, alpha.regions = 0, lwd = 2) 3.5 Export Data patches &lt;- patches_joined %&gt;% st_transform(crs = crs) # st_write(patches, &quot;data/patches/&quot;, &quot;highsev_patches.shp&quot;,driver = &#39;ESRI Shapefile&#39;) "],["sampling-quadrants.html", "Chapter 4 Sampling Quadrants 4.1 Set Up 4.2 Create Sampling Quadrants 4.3 Export Data", " Chapter 4 Sampling Quadrants 4.1 Set Up 4.1.1 Libraries library(elevatr) library(tidyverse) library(sf) library(terra) library(mapview) 4.1.2 Import High-Severity Patches and Fire Boundaries # data import patches &lt;- st_read(&quot;data/patches/highsev_patches.shp&quot;) %&gt;% st_transform(crs=&quot;EPSG:4326&quot;) crs &lt;- crs(patches) patch_interiors&lt;- st_read(&quot;data/patches/highsev_patches_interior.shp&quot;) %&gt;% st_transform(crs=crs) patch_exteriors&lt;- st_read(&quot;data/patches/highsev_patches_exterior.shp&quot;) %&gt;% st_transform(crs=crs) mtbs_export &lt;- st_read(&#39;data/fire_boundaries/mtbs_export.shp&#39;) %&gt;% st_transform(crs=crs) fires_export &lt;- st_read(&quot;data/fire_boundaries/fires_export.shp&quot;)%&gt;% st_transform(crs=crs) 4.2 Create Sampling Quadrants 4.2.1 Split Patches by North/South Aspects and Interior/Exterior # create list of fire IDs fire_list &lt;- unique(patches$Evnt_ID) quadrants_df = list() for(i in fire_list){ # filter patch interiors/exteriors to the selected fire patch_fire &lt;- patches %&gt;% filter(Evnt_ID == i) mapview(patch_fire) patches_interior &lt;- patch_interiors %&gt;% filter(Evnt_ID == i)%&gt;% st_make_valid() %&gt;% st_union() patches_exterior &lt;- patch_exteriors %&gt;% filter(Evnt_ID_1 == i)%&gt;% st_make_valid()%&gt;% st_union() # set event and fire id to the selected fire Evnt_ID &lt;- i Fire_ID &lt;-names(which.max(table(patch_fire$Fire_ID))) print(paste0(&quot;starting event &quot;,Evnt_ID,&quot; in fire group &quot;, Fire_ID)) # get and calculate cosine corrected aspect dem &lt;- get_elev_raster(patch_fire,z=11) aspect &lt;- terrain(dem, opt = &quot;aspect&quot;,unit = &quot;radians&quot;) ccaspect &lt;- cos(aspect) # positive aspects are north-facing, negative are south-facing ccaspect[ccaspect&gt;0] &lt;- 1 ccaspect[ccaspect&lt;0] &lt;- -1 ccaspect_poly &lt;- as.polygons(rast(ccaspect)) %&gt;% st_as_sf() pos_aspect &lt;- ccaspect_poly %&gt;% filter(layer==1)%&gt;% st_make_valid() neg_aspect &lt;- ccaspect_poly %&gt;% filter(layer==-1) %&gt;% st_make_valid() # get quadrants as the intersection of interior/exterior and pos/neg aspect pos_ext &lt;- st_intersection(patches_exterior,pos_aspect)%&gt;% st_make_valid() %&gt;% st_union() %&gt;% st_as_sf()%&gt;% mutate(quadrant = &quot;pos_ext&quot;, Evnt_ID = i, quad_id_event = paste0(Evnt_ID,&quot;-&quot;,quadrant), Fire_ID = Fire_ID, quad_id_fire = paste0(Fire_ID,&quot;-&quot;,quadrant)) pos_int &lt;- st_intersection(patches_interior,pos_aspect)%&gt;% st_make_valid() %&gt;% st_union()%&gt;% st_as_sf()%&gt;% mutate(quadrant = &quot;pos_int&quot;, Evnt_ID = i, quad_id_event = paste0(Evnt_ID,&quot;-&quot;,quadrant), Fire_ID = Fire_ID, quad_id_fire = paste0(Fire_ID,&quot;-&quot;,quadrant)) neg_ext &lt;- st_intersection(patches_exterior,neg_aspect)%&gt;% st_make_valid() %&gt;% st_union() %&gt;% st_as_sf()%&gt;% mutate(quadrant = &quot;neg_ext&quot;, Evnt_ID = i, quad_id_event = paste0(Evnt_ID,&quot;-&quot;,quadrant), Fire_ID = Fire_ID, quad_id_fire = paste0(Fire_ID,&quot;-&quot;,quadrant)) neg_int &lt;- st_intersection(patches_interior, neg_aspect)%&gt;% st_make_valid() %&gt;% st_union() %&gt;% st_as_sf()%&gt;% mutate(quadrant = &quot;neg_int&quot;, Evnt_ID = i, quad_id_event = paste0(Evnt_ID,&quot;-&quot;,quadrant), Fire_ID = Fire_ID, quad_id_fire = paste0(Fire_ID,&quot;-&quot;,quadrant)) # combine, export quadrants all_quadrants &lt;- rbind(neg_int,pos_int,neg_ext,pos_ext) %&gt;% st_transform(crs=crs) quadrants_df[[i]] &lt;- all_quadrants print(paste0(&quot;completed&quot;)) } # bind list together quadrants_fullset &lt;- do.call(rbind,quadrants_df) %&gt;% st_as_sf() 4.2.2 Clean Quadrants # removes erroneous polygons created from irregular fire boundary shapes # removes small border mismatched fire quadrants_clean &lt;- quadrants_fullset %&gt;% mutate(area=as.numeric(st_area(x))) %&gt;% filter(area &gt; 1) %&gt;% group_by(Evnt_ID) %&gt;% mutate(n=n()) %&gt;% filter(n == 4) # clean up for export quadrants_export &lt;- quadrants_clean %&gt;% st_make_valid() %&gt;% st_as_sf() %&gt;% dplyr::select(-&quot;area&quot;)%&gt;% st_transform(crs=crs) 4.3 Export Data # st_write(quadrants_export,&quot;data/patches/&quot;,&quot;quadrants_export.shp&quot;,driver = &quot;ESRI Shapefile&quot;) "],["training-data.html", "Chapter 5 Training Data 5.1 Set Up 5.2 Import Data 5.3 Sampling Points 5.4 Export", " Chapter 5 Training Data 5.1 Set Up 5.1.0.1 Libraries library(tidyverse) library(sf) library(terra) 5.2 Import Data patches &lt;- st_read(&quot;data/patches/highsev_patches.shp&quot;) %&gt;% st_transform(crs=&quot;EPSG: 4326&quot;) crs &lt;- crs(patches) quadrants &lt;- st_read(&quot;data/patches/quadrants_export.shp&quot;) %&gt;% st_transform(crs=crs) 5.3 Sampling Points 5.3.1 Import and Combine Training Points points_list &lt;- list.files(path = &quot;data/points/individual_fire_points/&quot;, pattern=&#39;.shp&#39;, all.files=TRUE, full.names=TRUE) points_all &lt;- lapply(points_list, st_read) points &lt;- do.call(rbind,points_all) %&gt;% st_transform(crs=crs) 5.3.2 Assign Points and Clean Data # join points dataset back to fires to fill out dataset points_joined &lt;- st_join(points,patches,left=TRUE,largest=TRUE) %&gt;% st_join(.,quadrants,left=TRUE,largest=TRUE) ## Warning: attribute variables are assumed to be spatially constant throughout all ## geometries ## Warning: attribute variables are assumed to be spatially constant throughout all ## geometries points_cleaned &lt;- points_joined %&gt;% dplyr::select(&quot;class&quot;,&quot;ptch_r_&quot;,&quot;Evnt_ID.x&quot;,&quot;Incd_Nm&quot;,&quot;Fire_ID.x&quot;,&quot;year&quot;,&quot;ecoregn&quot;,&quot;ptch_fr&quot;,&quot;quadrnt&quot;,&quot;qd_d_vn&quot;,&quot;qd_d_fr&quot;) %&gt;% rename(patch_area_ha = ptch_r_, Event_ID = Evnt_ID.x, Incid_Name = Incd_Nm, Fire_ID = Fire_ID.x, patch_frtype = ptch_fr, quad = quadrnt, quad_event_id= qd_d_vn, quad_fire_id=qd_d_fr) %&gt;% st_transform(crs=crs) 5.4 Export # st_write(points_cleaned, &quot;data/points/&quot;, &quot;points_export.shp&quot;,driver = &#39;ESRI Shapefile&#39;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
